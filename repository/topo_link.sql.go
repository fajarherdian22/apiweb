// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: topo_link.sql

package repository

import (
	"context"
)

const getTopo = `-- name: GetTopo :many
SELECT siteid, interface_a, tlp_a, city, longitude, latitude, ne_a, ne_b, site_destination, interface_b, tlp_b, longitude_destination, latitude_destination, link, type_transport, level_ne_a, level_ne_b, bandwith, max_util, capacity FROM topo_link
WHERE city != ""
`

func (q *Queries) GetTopo(ctx context.Context) ([]TopoLink, error) {
	rows, err := q.db.QueryContext(ctx, getTopo)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TopoLink
	for rows.Next() {
		var i TopoLink
		if err := rows.Scan(
			&i.Siteid,
			&i.InterfaceA,
			&i.TlpA,
			&i.City,
			&i.Longitude,
			&i.Latitude,
			&i.NeA,
			&i.NeB,
			&i.SiteDestination,
			&i.InterfaceB,
			&i.TlpB,
			&i.LongitudeDestination,
			&i.LatitudeDestination,
			&i.Link,
			&i.TypeTransport,
			&i.LevelNeA,
			&i.LevelNeB,
			&i.Bandwith,
			&i.MaxUtil,
			&i.Capacity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTopoCity = `-- name: GetTopoCity :many
SELECT siteid, interface_a, tlp_a, city, longitude, latitude, ne_a, ne_b, site_destination, interface_b, tlp_b, longitude_destination, latitude_destination, link, type_transport, level_ne_a, level_ne_b, bandwith, max_util, capacity FROM topo_link
WHERE city = ?
`

func (q *Queries) GetTopoCity(ctx context.Context, city string) ([]TopoLink, error) {
	rows, err := q.db.QueryContext(ctx, getTopoCity, city)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TopoLink
	for rows.Next() {
		var i TopoLink
		if err := rows.Scan(
			&i.Siteid,
			&i.InterfaceA,
			&i.TlpA,
			&i.City,
			&i.Longitude,
			&i.Latitude,
			&i.NeA,
			&i.NeB,
			&i.SiteDestination,
			&i.InterfaceB,
			&i.TlpB,
			&i.LongitudeDestination,
			&i.LatitudeDestination,
			&i.Link,
			&i.TypeTransport,
			&i.LevelNeA,
			&i.LevelNeB,
			&i.Bandwith,
			&i.MaxUtil,
			&i.Capacity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTopoCity = `-- name: ListTopoCity :many
SELECT distinct(city) FROM topo_link WHERE city !=""
`

func (q *Queries) ListTopoCity(ctx context.Context) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, listTopoCity)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var city string
		if err := rows.Scan(&city); err != nil {
			return nil, err
		}
		items = append(items, city)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
