// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: plmn_traffic.sql

package repository

import (
	"context"
)

const getFilterName = `-- name: GetFilterName :many
SELECT DISTINCT a.ran_site_city, a.ran_site_region from plmn_traffic a
`

type GetFilterNameRow struct {
	RanSiteCity   string `json:"ran_site_city"`
	RanSiteRegion string `json:"ran_site_region"`
}

func (q *Queries) GetFilterName(ctx context.Context) ([]GetFilterNameRow, error) {
	rows, err := q.db.QueryContext(ctx, getFilterName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFilterNameRow
	for rows.Next() {
		var i GetFilterNameRow
		if err := rows.Scan(&i.RanSiteCity, &i.RanSiteRegion); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPlmnData = `-- name: GetPlmnData :many
SELECT date, moentity, ran_site_city, ran_site_region, ran_site_longitude, ran_site_latitude, ran_site_site_vendor, traffic, traffic_type from plmn_traffic
WHERE date = ?
`

func (q *Queries) GetPlmnData(ctx context.Context, date string) ([]PlmnTraffic, error) {
	rows, err := q.db.QueryContext(ctx, getPlmnData, date)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PlmnTraffic
	for rows.Next() {
		var i PlmnTraffic
		if err := rows.Scan(
			&i.Date,
			&i.Moentity,
			&i.RanSiteCity,
			&i.RanSiteRegion,
			&i.RanSiteLongitude,
			&i.RanSiteLatitude,
			&i.RanSiteSiteVendor,
			&i.Traffic,
			&i.TrafficType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPlmnDataCity = `-- name: GetPlmnDataCity :many
SELECT date, moentity, ran_site_city, ran_site_region, ran_site_longitude, ran_site_latitude, ran_site_site_vendor, traffic, traffic_type from plmn_traffic
WHERE date = ? and ran_site_city = ?
`

type GetPlmnDataCityParams struct {
	Date        string `json:"date"`
	RanSiteCity string `json:"ran_site_city"`
}

func (q *Queries) GetPlmnDataCity(ctx context.Context, arg GetPlmnDataCityParams) ([]PlmnTraffic, error) {
	rows, err := q.db.QueryContext(ctx, getPlmnDataCity, arg.Date, arg.RanSiteCity)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PlmnTraffic
	for rows.Next() {
		var i PlmnTraffic
		if err := rows.Scan(
			&i.Date,
			&i.Moentity,
			&i.RanSiteCity,
			&i.RanSiteRegion,
			&i.RanSiteLongitude,
			&i.RanSiteLatitude,
			&i.RanSiteSiteVendor,
			&i.Traffic,
			&i.TrafficType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
